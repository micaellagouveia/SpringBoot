{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpringBoot Reposit\u00f3rio de estudo de SpringBoot em Java. Vantagens SpringBoot Configura o projeto atrav\u00e9s de conven\u00e7\u00f5es que ele adota. Servidor embarcado: TomCat DevTools An\u00e1lise de M\u00e9tricas Projetos HelloWorld: projeto simples feito para aprender a incializa\u00e7\u00e3o de um projeto Spring. Spring-boot: projeto para entendimento de controllers. Eventos App: projeto para cria\u00e7\u00e3o de eventos e cadastro de convidados no banco de dados MySQL. Saber Mais","title":"Home"},{"location":"#springboot","text":"Reposit\u00f3rio de estudo de SpringBoot em Java.","title":"SpringBoot"},{"location":"#vantagens-springboot","text":"Configura o projeto atrav\u00e9s de conven\u00e7\u00f5es que ele adota. Servidor embarcado: TomCat DevTools An\u00e1lise de M\u00e9tricas","title":"Vantagens SpringBoot"},{"location":"#projetos","text":"HelloWorld: projeto simples feito para aprender a incializa\u00e7\u00e3o de um projeto Spring. Spring-boot: projeto para entendimento de controllers. Eventos App: projeto para cria\u00e7\u00e3o de eventos e cadastro de convidados no banco de dados MySQL. Saber Mais","title":"Projetos"},{"location":"EventosApp/","text":"Eventos App Aplica\u00e7\u00e3o para cadastro de eventos. Podendo adicionar nome do evento, lugar, data e hor\u00e1rio. Para cada evento h\u00e1 uma lista de convidados, contendo nome e rg de cada convidado. Os dados, tanto do evento quanto dos convidados s\u00e3o armazenados em um banco de dados MySQL. 1. Cria\u00e7\u00e3o do Index P\u00e1gina incial da aplica\u00e7\u00e3o. Cria\u00e7\u00e3o da IndexController: atribui p\u00e1gina como @Controller e faz um m\u00e9todo @RequestMapping(\"/\") que retorna o index.html.(Ou seja, no endere\u00e7o inicial a p\u00e1gina index ser\u00e1 atribu\u00edda) Cria\u00e7\u00e3o do index.html 2. MVC para Evento e Convidado Model: Classe evento e convidado. Controller: EventoController. Faz os @RequestMapping do cadastro de eventos, da lista de eventos e de cada evento espec\u00edfico(a partir do seu c\u00f3digo gerado). View: formEvento e detalhesEvento: 1) Formul\u00e1rio para cadastro de eventos. No pr\u00f3prio index.html referenciamos a lista de eventos. 2) Detalhes do evento espec\u00edfico gerado por c\u00f3digo. 3. Configura\u00e7\u00e3o do Banco MySQL Necessita de depencd\u00eancias JPA, MySQL, Hibernate, H2 Dependency. application.properties : ativa\u00e7\u00e3o do hibernate, set do datasource(URL, nome do usu\u00e1rio e senha). EventoRepository e ConvidadoRepository: crud para ter acesso \u00e0 metodos de acesso ao banco. model Evento: gerar c\u00f3digo autom\u00e1tico para cada evento (@Id e @GeneratedValue). Tamb\u00e9m gerar uma lista de convidados (@OneToMany) model Convidado: gerar um evento (@ManyToOne) e tornar o RG o @Id (\u00fanico para cada pessoa). @OneToMany e @ManyToOne fazem a rela\u00e7\u00e3o no banco de dados entre evento e convidado. H\u00e1 um evento para v\u00e1rios convidados, e h\u00e1 v\u00e1rios convidados para um evento. A tabela de convidados recebe o c\u00f3digo do evento designado. 4. Deletar Convidado ou Evento do Banco Cria\u00e7\u00e3o do m\u00e9todo de deletar. Evento: recebe o c\u00f3digo do evento, encontra evento no banco e deleta. Retorna a lista de eventos. Convidado: recebe rg do convidado. Encontra convidado pelo RG, deleta convidado. Pega o c\u00f3digo do evento relacionado ao convidado e redireciona para a p\u00e1gina do detalhe do evento espec\u00edfico. 5. Valida\u00e7\u00e3o de Dados Enviar formul\u00e1rios de cadastramento de eventos e convidados apenas se todos os campos estiverem preenchidos. @NotEmpty atributos. @Valid Convidado ou @Valid Evento. Se n\u00e3o for valido, haver\u00e1 um erro, e retornar\u00e1 uma mensagem de erro. Se for valido e salvar no banco, retornar\u00e1 uma mensagem de sucesso. Style: Materialize Reposit\u00f3rio para estiliza\u00e7\u00e3o/css das p\u00e1ginas html.","title":"EventosApp"},{"location":"EventosApp/#eventos-app","text":"Aplica\u00e7\u00e3o para cadastro de eventos. Podendo adicionar nome do evento, lugar, data e hor\u00e1rio. Para cada evento h\u00e1 uma lista de convidados, contendo nome e rg de cada convidado. Os dados, tanto do evento quanto dos convidados s\u00e3o armazenados em um banco de dados MySQL.","title":"Eventos App"},{"location":"EventosApp/#1-criacao-do-index","text":"P\u00e1gina incial da aplica\u00e7\u00e3o. Cria\u00e7\u00e3o da IndexController: atribui p\u00e1gina como @Controller e faz um m\u00e9todo @RequestMapping(\"/\") que retorna o index.html.(Ou seja, no endere\u00e7o inicial a p\u00e1gina index ser\u00e1 atribu\u00edda) Cria\u00e7\u00e3o do index.html","title":"1. Cria\u00e7\u00e3o do Index"},{"location":"EventosApp/#2-mvc-para-evento-e-convidado","text":"Model: Classe evento e convidado. Controller: EventoController. Faz os @RequestMapping do cadastro de eventos, da lista de eventos e de cada evento espec\u00edfico(a partir do seu c\u00f3digo gerado). View: formEvento e detalhesEvento: 1) Formul\u00e1rio para cadastro de eventos. No pr\u00f3prio index.html referenciamos a lista de eventos. 2) Detalhes do evento espec\u00edfico gerado por c\u00f3digo.","title":"2. MVC para Evento e Convidado"},{"location":"EventosApp/#3-configuracao-do-banco-mysql","text":"Necessita de depencd\u00eancias JPA, MySQL, Hibernate, H2 Dependency. application.properties : ativa\u00e7\u00e3o do hibernate, set do datasource(URL, nome do usu\u00e1rio e senha). EventoRepository e ConvidadoRepository: crud para ter acesso \u00e0 metodos de acesso ao banco. model Evento: gerar c\u00f3digo autom\u00e1tico para cada evento (@Id e @GeneratedValue). Tamb\u00e9m gerar uma lista de convidados (@OneToMany) model Convidado: gerar um evento (@ManyToOne) e tornar o RG o @Id (\u00fanico para cada pessoa). @OneToMany e @ManyToOne fazem a rela\u00e7\u00e3o no banco de dados entre evento e convidado. H\u00e1 um evento para v\u00e1rios convidados, e h\u00e1 v\u00e1rios convidados para um evento. A tabela de convidados recebe o c\u00f3digo do evento designado.","title":"3. Configura\u00e7\u00e3o do Banco MySQL"},{"location":"EventosApp/#4-deletar-convidado-ou-evento-do-banco","text":"Cria\u00e7\u00e3o do m\u00e9todo de deletar. Evento: recebe o c\u00f3digo do evento, encontra evento no banco e deleta. Retorna a lista de eventos. Convidado: recebe rg do convidado. Encontra convidado pelo RG, deleta convidado. Pega o c\u00f3digo do evento relacionado ao convidado e redireciona para a p\u00e1gina do detalhe do evento espec\u00edfico.","title":"4. Deletar Convidado ou Evento do Banco"},{"location":"EventosApp/#5-validacao-de-dados","text":"Enviar formul\u00e1rios de cadastramento de eventos e convidados apenas se todos os campos estiverem preenchidos. @NotEmpty atributos. @Valid Convidado ou @Valid Evento. Se n\u00e3o for valido, haver\u00e1 um erro, e retornar\u00e1 uma mensagem de erro. Se for valido e salvar no banco, retornar\u00e1 uma mensagem de sucesso.","title":"5. Valida\u00e7\u00e3o de Dados"},{"location":"EventosApp/#style-materialize","text":"Reposit\u00f3rio para estiliza\u00e7\u00e3o/css das p\u00e1ginas html.","title":"Style: Materialize"},{"location":"SpringBoot/","text":"SpringBoot Componentes Nome Descri\u00e7\u00e3o @Bean resposabiliza o spring pelas inst\u00e2ncias da classe. @Component Bean main gen\u00e9rico. @Service Bean para anotar classes e regras de neg\u00f3cios. @Repository Bean para banco de dados. @Controller Bean para requisi\u00e7\u00e3o. @Entity Entidade para o banco de dados. Cria uma tabela no banco. @AutoWired ponto de inje\u00e7\u00e3o: spring se torna respons\u00e1vel para criar, gerenciar e destruir as inst\u00e2ncias da classe. @NotEmpty Valida\u00e3o: determina que certo atributo n\u00e3o deve retornar vazio. @RequestMapping determina a rota do m\u00e9todo. @PathVariable obt\u00e9m algum espa\u00e7o reservado no URI. @Valid retorna uma classe v\u00e1lida. @OneToMany rela\u00e7\u00e3o no banco: um para muitos . @ManyToOne rela\u00e7\u00e3o no banco: muitos para um . @Id Torna o atributo o Id no banco de dados, a chave prim\u00e1ria. @GeneratedValue valor gerado pelo spring.","title":"SpringBoot"},{"location":"SpringBoot/#springboot-componentes","text":"Nome Descri\u00e7\u00e3o @Bean resposabiliza o spring pelas inst\u00e2ncias da classe. @Component Bean main gen\u00e9rico. @Service Bean para anotar classes e regras de neg\u00f3cios. @Repository Bean para banco de dados. @Controller Bean para requisi\u00e7\u00e3o. @Entity Entidade para o banco de dados. Cria uma tabela no banco. @AutoWired ponto de inje\u00e7\u00e3o: spring se torna respons\u00e1vel para criar, gerenciar e destruir as inst\u00e2ncias da classe. @NotEmpty Valida\u00e3o: determina que certo atributo n\u00e3o deve retornar vazio. @RequestMapping determina a rota do m\u00e9todo. @PathVariable obt\u00e9m algum espa\u00e7o reservado no URI. @Valid retorna uma classe v\u00e1lida. @OneToMany rela\u00e7\u00e3o no banco: um para muitos . @ManyToOne rela\u00e7\u00e3o no banco: muitos para um . @Id Torna o atributo o Id no banco de dados, a chave prim\u00e1ria. @GeneratedValue valor gerado pelo spring.","title":"SpringBoot Componentes"}]}